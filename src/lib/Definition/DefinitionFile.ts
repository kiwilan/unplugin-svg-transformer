import type { OptionsExtended } from '../../types'
import { Path } from '../Path'

/**
 * To create definition file.
 */
export class DefinitionFile {
  protected constructor(
    protected options: OptionsExtended,
    protected contents = '',
    protected useVue = false,
  ) {}

  public static async make(options: OptionsExtended, types: string, isNuxt: boolean): Promise<DefinitionFile> {
    const self = new DefinitionFile(options, types)

    await self.checkVue()
    const optionsType = `{ cacheDir?: string, global: boolean, libraryDir?: string, svgDir?: string, useTypes: boolean, isTesting: boolean, isNuxt: boolean, nuxtDir: string, fallback: string, svg: { classDefault?: string[], clearSize: 'all' | 'parent' | 'none', clearClass: 'all' | 'parent' | 'none', clearStyle: 'all' | 'parent' | 'none', currentColor: boolean, inlineStyleDefault?: string[], sizeInherit: boolean, title?: boolean }, warning: boolean }`

    let contents = [
      '/* eslint-disable */',
      '/* prettier-ignore */',
      '// @ts-nocheck',
      '// Generated by unplugin-svg-transformer',
      'export {};',
      '',
      'declare global {',
      `  ${types}`,
      '  interface Window {',
      '    ust: {',
      `      options: ${optionsType}`,
      '      svgList: Record<SvgName, () => Promise<{ default: string }>>',
      '      importSvg: (name: SvgName) => Promise<string>',
      '    }',
      '  }',
      '}',
      '',
    ]

    if (self.useVue) {
      contents = [
        ...contents,
        'declare module \'vue\' {',
        '  export interface GlobalComponents {',
        '    SvgIcon: typeof import(\'unplugin-svg-transformer/dist/vue\')[\'SvgIcon\']',
        '  }',
        '}',
        '',
      ]
    }

    if (!isNuxt) {
      contents = [
        ...contents,
        'window.ust = {',
        '  options: options || {},',
        '  svgList: svgList || {},',
        '  importSvg: importSvg || function () {},',
        '} || {}',
        '',
      ]
    }

    self.contents = contents.join('\n')

    return self
  }

  public getContents(): string {
    return this.contents
  }

  protected async checkVue(): Promise<void> {
    const rootPath = Path.rootPath('package.json')

    if (await Path.fileExists(rootPath)) {
      const packageJson = await Path.read(rootPath)

      const regex = /vue|nuxt/
      const containsVueOrNuxt = regex.test(packageJson)

      if (containsVueOrNuxt)
        this.useVue = true
    }
  }

  /**
   * Write the definition files.
   *
   * - `icons.d.ts` for Nuxt
   * - `client.d.ts` for Vite
   * - `icons.d.ts` for global types
   */
  public async write(): Promise<void> {
    const globalPath = Path.rootPath('icons.d.ts')
    const nuxtPath = `${this.options.nuxtDir}/types/icons.d.ts`
    const clientPath = Path.packagePath({ dist: false, path: 'client.d.ts' })

    await Path.rm(clientPath)
    let viteContents = this.contents
    viteContents = viteContents.replace('\'unplugin-svg-transformer', '\'.')
    await Path.write(clientPath, viteContents)

    await Path.rm(globalPath)
    if (this.options.global)
      await Path.write(globalPath, this.contents)

    const viteEnv = Path.rootPath('src/vite-env.d.ts')
    if (await Path.fileExists(viteEnv))
      await Path.appendLineIfNotExists(viteEnv, '/// <reference types="unplugin-svg-transformer/client" />')

    await Path.rm(nuxtPath)
    if (this.options.isNuxt)
      await Path.write(nuxtPath, this.contents)
  }
}
