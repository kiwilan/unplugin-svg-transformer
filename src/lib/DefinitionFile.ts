import { dirname, join } from 'node:path'
import { Utils } from './Utils'

export class DefinitionFile {
  protected constructor(
    protected types: string,
  ) {}

  public static async make(types: string) {
    const self = new DefinitionFile(types)

    const rootPath = process.cwd()
    const filename = 'icons.d.ts'
    const path = join(rootPath, filename)

    if (await Utils.fileExists(path))
      await Utils.rm(path)

    const contents = [
      '/* eslint-disable */',
      '/* prettier-ignore */',
      '// @ts-nocheck',
      '// Generated by unplugin-svg-transformer',
      'export {}',
      '',
      'declare module \'vue\' {',
      '  export interface GlobalComponents {',
      '    SvgIcon: typeof import(\'unplugin-svg-transformer/components\')[\'SvgIcon\']',
      '  }',
      '}',
    ]

    const content = contents.join('\n')
    await Utils.write(path, content)
    await self.type()
  }

  private async type(): Promise<void> {
    const path = Utils.componentsPath()
    if (!await Utils.fileExists(path)) {
      const dir = dirname(path)
      await Utils.directoryExists(dir)
      await Utils.write(path, '')
    }
    let content = await Utils.read(path)

    content = content.replace(/^declare type IconType = .+$/m, '')
    content = content.replace(/type: PropType<string>;/g, 'type: PropType<IconType>;')
    content = content.replace(/\n\n/g, '\n')
    content = content.replace('import { PropType } from \'vue\';', `import { PropType } from 'vue';\n${this.types}`)
    await Utils.write(path, content)
  }
}
